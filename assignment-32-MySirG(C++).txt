NAME- UDIT KHANDELWAL								ASSIGNMENT-32 (Overriding, overloading, constructor in inheritance)




1. Create a class FLOAT that contains one float data member. Overload all the four
arithmetic operators so that they can operate on the objects of FLOAT.


#include<iostream>

using namespace std;


class Float
{
    float f;

public:
    Float()
    {
        f=0;
    }

    Float(float n)
    {
        f=n;
    }

    Float(const Float& n)
    {
        f=n.f;
    }

    void setValue(float n)
    {
        f=n;
    }

    void display()
    {
        cout<<"Value= "<<f<<endl;
    }

    Float operator+(const Float &n)
    {
        Float t;
        t.f=f+n.f;
        return t;
    }

    Float operator-(const Float &n)
    {
        Float t;
        t.f=f-n.f;
        return t;
    }

    Float operator*(const Float &n)
    {
        Float t;
        t.f=f*n.f;
        return t;
    }

    Float operator/(const Float &n)
    {
        if(n.f==0)
        {
            cout<<"Cannot divide by zero Invalid Operation"<<endl;
            exit(0);
        }
        Float t;
        t.f=f/n.f;
        return t;
    }

    Float& operator=(const Float &n)
    {
        f=n.f;
        return *this;
    }
};

int main()
{
    Float f1(3.0);

    Float f2(5.0);

    Float f3;
    Float f4;
    Float f5;
    Float f6;

    f3=f1+f2;
    f3.display();

    f4=f2-f1;
    f4.display();

    f5=f1*f2;
    f5.display();

    f6=f2/f1;
    f6.display();

    return 0;
}


2. Define a class Rectangle and overload area function for different types of data type.


#include<iostream>

using namespace std;


class Rectangle
{
    float ar;

public:
    Rectangle()
    {
        ar=0;
    }

    void display()
    {
        cout<<"Area= "<<ar<<endl;
    }

    void area(int n,int m)
    {
       ar = n*m;
    }

    void area(int n,double m)
    {
        ar = n*m;
    }

    void area(double n,int m)
    {
        ar = n*m;
    }

    void area(double n,double m)
    {
        ar = n*m;
    }

};

int main()
{
    Rectangle r;
    r.area(3,4);
    r.display();

    r.area(2.5,5);
    r.display();

    r.area(5,2.5);
    r.display();

    r.area(2.5,2.5);
    r.display();

    return 0;
}


3. Define a base class Animals having member function sound() . Define another
derived class from Animals class named Dogs. You need to override the sound
function of the base class in the derived class.


#include<iostream>

using namespace std;

class Animal
{
public:
    void sound(string s)
    {
        cout<<"Animal Sound called: "<<s<<endl;
    }
};

class Dogs : public Animal
{
public:
    void sound(string s)
    {
        cout<<"Dogs Sound called: "<<s<<endl;
    }
};

int main()
{
    Animal an;
    an.sound("meyao");

    Dogs d;
    d.sound("bow");

    return 0;
}


4. Define a class Addition that can add 2 or 3 numbers of different data types using
function overloading.


#include<iostream>

using namespace std;

class Addition
{

public:
    int sum(int a,int b)
    {
        return a+b;
    }

    double sum(double a,double b)
    {
        return a+b;
    }

    double sum(int a,double b)
    {
        return a+b;
    }

    double sum(double a,int b)
    {
        return a+b;
    }

    int sum(int a,int b,int c)
    {
        return a+b+c;
    }

    double sum(double a,double b,double c)
    {
        return a+b+c;
    }
};

int main()
{
    Addition a;
    cout<<"sum= "<<a.sum(1,2,3)<<endl;
    cout<<"sum= "<<a.sum(1,2)<<endl;
    cout<<"sum= "<<a.sum(1,2.0)<<endl;
    cout<<"sum= "<<a.sum(1.0,2)<<endl;
    cout<<"sum= "<<a.sum(1.0,2.0,3.0)<<endl;

    return 0;
}


5. Define a class A having multiple constructors. Define another class B derived from
class A. Create derived class constructors and show use of constructor in this single
inheritance.


#include<iostream>

using namespace std;

class A
{
public:

    A()
    {
        cout<<"A() called"<<endl;
    }

    A(int a)
    {
        cout<<"A(int) called"<<endl;
    }

};

class B : public A
{
public:

    B() : A()
    {
        cout<<"B() called"<<endl;
    }

    B(int a) : A(a)
    {
        cout<<"B(int) called"<<endl;
    }

};

int main()
{
    A objA1;
    A objA2(5);

    B objB1;
    B objB2(5);

    return 0;
}


6. C++ Program to illustrate the use of Constructors in multilevel inheritance of your
choice.


#include<iostream>

using namespace std;

class A
{
public:

    A()
    {
        cout<<"A() called"<<endl;
    }

    A(int a)
    {
        cout<<"A(int) called"<<endl;
    }

};

class B : public A
{
public:

    B() : A()
    {
        cout<<"B() called"<<endl;
    }

    B(int a) : A(a)
    {
        cout<<"B(int) called"<<endl;
    }

};

class C : public B
{
public:

    C() : B()
    {
        cout<<"C() called"<<endl;
    }

    C(int a) : B(a)
    {
        cout<<"C(int) called"<<endl;
    }
};

int main()
{
    A objA1;
    A objA2(5);

    B objB1;
    B objB2(5);

    C objC1;
    C objC2(5);

    return 0;
}


7. C++ Program to illustrate the use of Constructors in single inheritance of your choice.


#include<iostream>

using namespace std;

class Person
{
    string name;
    int age;
public:

    Person()
    {
        cout<<"Person Default Constructor called"<<endl;
    }

    Person(string s,int a)
    {
        name=s;
        age=a;
        cout<<"Person Parameterised Constructor called"<<endl;
    }

    string getName()
    {
        return name;
    }

    int getAge()
    {
        return age;
    }

};

class Student : public Person
{
    int rank;
public:

    Student() : Person()
    {
        cout<<"Student Default Constructor called"<<endl;
    }

    Student(string s,int a,int r) : Person(s,a)
    {
        rank=r;
        cout<<"Student Parameterised Constructor called"<<endl;
    }

    void display()
    {
        cout<<"NAME: "<<getName()<<" AGE: "<<getAge()<<" RANK: "<<rank<<endl;
    }

};

int main()
{
    Student s("UDIT KHANDELWAL",30,100);
    s.display();

    return 0;
}


8. Write a C++ program to find the factorial of a number using copy constructor


#include<iostream>

using namespace std;

class Factorial
{
    int num;
    int fact;

public:

    Factorial()
    {
        num=0;
        fact=1;
    }

    Factorial(int n)
    {
        num=n;
        fact=1;
        int i=1;
        while(i<=n)
        {
            fact*=i;
            i++;
        }
    }

    Factorial(const Factorial& f)
    {
        num=f.num;
        fact=1;
        int i=1;
        while(i<=num)
        {
            fact*=i;
            i++;
        }
    }

    void displayFactorial()
    {
        cout<<"Factorial of "<<num<<" is: "<<fact<<endl;
    }
};

int main()
{
    Factorial obj1(5);
    obj1.displayFactorial();

    Factorial obj2=obj1;
    obj2.displayFactorial();

    return 0;
}


9. Write a C++ program to calculate the area of triangle, rectangle and circle using
constructor overloading. The program should be menu driven.


#include<iostream>
#include<math.h>

using namespace std;

class Area
{
    float rect,tri,cir;

public:

    Area()
    {
        rect=0;
        tri=0;
        cir=0;
    }

    Area(int l,int b)
    {
        rect=l*b;
        tri=0;
        cir=0;
    }

    Area(int a,int b,int c)
    {
        int s=(a+b+c)/2.0;
        tri=sqrt(s*(s-a)*(s-b)*(s-c));
        rect=0;
        cir=0;
    }

    Area(int r)
    {
        cir=3.14*r*r;
        rect=0;
        tri=0;
    }

    void displayAreaOfRectangle()
    {
        cout<<"Area of Rectangle is: "<<rect<<endl;
    }

    void displayAreaOfTriangle()
    {
        if(tri==0)
        {
            cout<<"Triangle is invalid"<<endl;
        }
        cout<<"Area of Triangle is: "<<tri<<endl;
    }

    void displayAreaOfCircle()
    {
        cout<<"Area of Circle is: "<<cir<<endl;
    }
};

int main()
{
    while(1)
    {
        cout<<"1.Calculate Area of Rectangle"<<endl;
        cout<<"2.Calculate Area of Triangle"<<endl;
        cout<<"3.Calculate Area of Circle"<<endl;
        cout<<"4.Exit"<<endl;
        cout<<"Enter Your Choice: ";
        int ch;
        cin>>ch;
        system("cls");
        switch(ch)
        {
        case 1:
            {
                int l,b;
                cout<<"Enter Length: ";
                cin>>l;
                cout<<"Enter Breadth: ";
                cin>>b;
                Area rectangle(l,b);
                rectangle.displayAreaOfRectangle();
            }
            break;

        case 2:
            {
                int s1,s2,s3;
                cout<<"Enter Side 1: ";
                cin>>s1;
                cout<<"Enter Side 2: ";
                cin>>s2;
                cout<<"Enter Side 3: ";
                cin>>s3;
                Area triangle(s1,s2,s3);
                triangle.displayAreaOfTriangle();
            }
            break;

        case 3:
            {
                int r;
                cout<<"Enter Radius: ";
                cin>>r;
                Area circle(r);
                circle.displayAreaOfCircle();
            }
            break;

        default:
            {
                cout<<"Enter a valid choice"<<endl;
            }
            break;

        case 4:
            {
                exit(0);
            }
            break;
        }
    }

    return 0;
}


10. Create a C++ class for player objects with the following attributes: player no., name,
number of matches and number of goals done in each match. The number of
matches varies for each player. Write a parameterized constructor which initializes
player no., name, number of matches and creates an array for number of goals and
number of matches dynamically.


#include<iostream>
#include<math.h>

using namespace std;

class Player
{
    int pno,matches;
    string pname;
    int *goal;

public:

    Player()
    {
        cout<<"Enter Player Number: ";
        cin>>pno;
	  cin.ignore();
        cout<<"Enter Player Name: ";
        getline(cin,pname);
        cout<<"Enter Number of Matches: ";
        cin>>matches;
        goal = new int[matches];
        for(int i=0;i<matches;i++)
        {
            cout<<"Enter Goal in Match "<<i+1<<" : ";
            cin>>goal[i];
        }
    }

    Player(int n,string name,int m,int *ptr)
    {
        pno=n;
        matches=m;
        pname=name;
        goal = new int[m];
        for(int i=0;i<m;i++)
        {
            goal[i]=ptr[i];
        }
    }

    void display()
    {
        cout<<"Player number: "<<pno<<endl;
        cout<<"Player Name: "<<pname<<endl;
        cout<<"Number of Matches played: "<<matches<<endl;
        for(int i=0;i<matches;i++)
        {
            cout<<"Number of Goals in Match "<<i+1<<" : "<<goal[i]<<endl;
        }
    }

};

int main()
{
    int n,m;
    string name;
    cout<<"Enter Player Number: ";
    cin>>n;
    cin.ignore();
    cout<<"Enter Player Name: ";
    getline(cin,name);
    cout<<"Enter Number of Matches: ";
    cin>>m;
    int arr[m];
    for(int i=0;i<m;i++)
    {
        cout<<"Enter Number of Goals in Match "<<i+1<<" : ";
        cin>>arr[i];
    }

    Player p(n,name,m,arr);
    p.display();

    return 0;
}

